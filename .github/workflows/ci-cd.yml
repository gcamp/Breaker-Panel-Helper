name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  pull_request_target:
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/breaker-panel-helper

jobs:

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.node-version'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint --if-present

    - name: Run tests
      run: npm test --if-present

    - name: Create test database
      run: node test-data.js

    - name: Run feature validation
      run: node validate-features.js

    - name: Check database creation
      run: |
        node -e "
          const sqlite3 = require('sqlite3');
          const db = new sqlite3.Database('test.db');
          console.log('Database creation test passed');
          db.close();
        "

  test-backend:
    name: Test Backend Changes
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.node-version'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test server startup
      run: |
        timeout 10s npm start &
        sleep 5
        curl -f http://localhost:3000 || exit 1

    - name: Run backend tests
      run: npm run test:api

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.node-version'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        # Check for high severity vulnerabilities
        npm audit --audit-level=high || {
          echo "⚠️  High severity vulnerabilities found"
          npm audit --audit-level=high --json > audit-results.json || true
          cat audit-results.json
        }

    - name: Check for secrets
      run: |
        # Basic secret detection
        echo "Checking for potential secrets..."
        
        # Check for common secret patterns
        if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" . | grep -v "node_modules"; then
          echo "⚠️  Found potential secrets - please review"
        fi

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  test-docker:
    name: Test Docker Changes
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: breaker-panel-helper:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Start container
        docker run --rm -d --name test-container \
          -p 3000:3000 \
          -e NODE_ENV=production \
          breaker-panel-helper:test
        
        # Wait for startup
        sleep 10
        
        # Test health
        curl -f http://localhost:3000 || exit 1
        
        # Check logs for errors
        if docker logs test-container 2>&1 | grep -i error; then
          echo "Found errors in container logs"
          exit 1
        fi
        
        # Cleanup
        docker stop test-container

  # Deploy jobs - only run on main branch or tags
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, test-backend, security, test-docker]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -p 3000:3000 \
          -e NODE_ENV=production \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000 || exit 1
        
        # Cleanup
        docker stop test-container

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes
        cat > release_notes.md << EOF
        ## Docker Image
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:${VERSION}
        docker pull ghcr.io/${{ github.repository }}:latest
        \`\`\`
        
        ## Deployment
        For Unraid deployment instructions, see the [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/DEPLOYMENT.md).
        
        ## Changes in this release
        - See commit history for detailed changes
        - All tests passing
        - Multi-architecture support (amd64, arm64)
        EOF

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [build, create-release]
    if: always() && (needs.build.result == 'success' || needs.create-release.result == 'success') && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Notify success
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "📦 Docker image available at: ghcr.io/${{ github.repository }}"
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "🎉 New release created: ${GITHUB_REF#refs/tags/}"
        fi